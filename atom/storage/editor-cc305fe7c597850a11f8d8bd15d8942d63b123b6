{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":23,"width":952,"height":1023,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite"],"buffers":[{"text":"class InsertionSort\n  attr_reader :unsorted, :sorted\n\n  def initialize(unsorted,sorted=[])\n    @unsorted = unsorted\n    @sorted = sorted\n  end\n\n  def unsorted\n    @unsorted\n  end\n\n  def sorted\n    @sorted\n  end\n\n  def front\n    sorted.insert(0,unsorted[0])\n  end\n\n  def find_less_than(sorted_index,unsorted_index)\n    (sorted[sorted_index] <=> unsorted[unsorted_index]) == 1\n  end\n\n  def place(sorted_index,unsorted_index)\n    sorted.insert(sorted_index,unsorted[unsorted_index])\n    unsorted.shift\n  end\n\n  def find_less_than_and_place(sorted_index,unsorted_index)\n    if (sorted[sorted_index] <=> unsorted[unsorted_index]) == 1\n      sorted.insert(sorted_index,unsorted[unsorted_index])\n      unsorted.shift\n    end\n  end\n\n  def sort\n    if unsorted.length == 0\n      unsorted\n    elsif unsorted.length == 1\n      sorted_active = front #why does this break if I change variable name from sorted_active to sorted\n      sorted_active\n    elsif unsorted.length == 2\n      if (unsorted[1] <=> unsorted[0]) == 1\n        unsorted\n      else\n        place(0,0)\n        place(0,0)\n        @sorted\n      end\n    elsif unsorted.length == 3\n      sorted.insert(0,unsorted[0])\n      unsorted.shift\n        if find_less_than_and_place(0,0)\n        else place(1,0)\n        if find_less_than_and_place(0,0)\n        elsif find_less_than_and_place(1,0)\n        else place(2,0)\n        end\n        @sorted\n      end\n\n  # This needs some work...pick up ones unsorted.length == 3 passes \n  # elsif unsorted.length == 4\n  #     sorted.insert(0,unsorted[0])\n  #     unsorted.shift\n  #     # place(0,0) #3721    3     721\n  #     if (sorted[0] <=> unsorted[0]) == 1\n  #       sorted.insert(0,unsorted[0])\n  #       unsorted.shift\n  #     else place(1,0) # 37 21\n  #\n  #     if find_less_than_and_place(0,0) #237 1\n  #     elsif find_less_than_and_place(1,0)\n  #     else place(2,0)\n  #\n  #     if find_less_than_and_place(0,0)\n  #     elsif find_less_than_and_place(1,0)\n  #     elsif find_less_than_and_place(2,0)\n  #     else place(3,0)\n  #   end\n  #     end\n    end\n  end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":48},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort.rb","digestWhenLastPersisted":"fdc4f2f81b8e7c7744e467ed166b42effd9f1b45","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"gem 'minitest', '~> 5.2'\nrequire 'minitest/autorun'\nrequire 'minitest/pride'\nrequire_relative 'insertion_sort'\n\nclass InsertionTest < Minitest::Test\n  def test_we_have_an_unsorted_list # is this right?\n    sorter = InsertionSort.new([])\n    assert sorter.unsorted\n  end\n\n  def test_we_have_a_sorted_list\n    sorter = InsertionSort.new([])\n    assert sorter.sorted, \"Actually, turns out we don't have a sorted list.\"\n  end\n\n  def test_it_sorts_an_empty_array\n    sorter = InsertionSort.new([])\n    assert_equal [], sorter.sort\n  end\n\n  def test_it_sorts_an_array_of_one\n    sorter = InsertionSort.new([1])\n    assert_equal [1], sorter.sort\n  end\n\n  def test_it_sorts_a_different_array_of_one\n    sorter = InsertionSort.new([7])\n    assert_equal [7], sorter.sort\n  end\n\n  def test_it_sorts_a_sorted_array_of_two\n    sorter = InsertionSort.new([2,7])\n    assert_equal [2,7], sorter.sort\n  end\n\n  def test_it_sorts_a_sorted_array_of_two_strings\n    sorter = InsertionSort.new([\"baloney\",\"gus\"])\n    assert_equal [\"baloney\",\"gus\"], sorter.sort\n  end\n\n  def test_it_sorts_an_unsorted_array_of_two\n    sorter = InsertionSort.new([7,2])\n    assert_equal [2,7], sorter.sort\n  end\n\n  def test_it_sorts_a_sorted_array_of_three\n    sorter = InsertionSort.new([2,3,7])\n    assert_equal [2,3,7], sorter.sort\n  end\n\n  def test_it_sorts_an_unsorted_array_of_three\n    sorter = InsertionSort.new([2,7,3])\n    assert_equal [2,3,7], sorter.sort\n  end\n\n  def test_it_sorts_a_different_unsorted_array_of_three_732\n    sorter = InsertionSort.new([7,3,2])\n    assert_equal [2,3,7], sorter.sort\n  end\n\n  def test_it_sorts_a_different_unsorted_array_of_three_327\n    sorter = InsertionSort.new([3,2,7])\n    assert_equal [2,3,7], sorter.sort\n  end\n\n  # def test_it_sorts_an_unsorted_array_of_four_1723\n  #   sorter = InsertionSort.new([1,7,2,3])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n  # def test_it_sorts_an_unsorted_array_of_four_7132\n  #   sorter = InsertionSort.new([7,1,3,2])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n  # def test_it_sorts_an_unsorted_array_of_four_3271\n  #   sorter = InsertionSort.new([3,2,7,1])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n\n  # def test_it_sorts_an_unsorted_array_of_four_7213\n  #   sorter = InsertionSort.new([7,2,1,3])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n  # def test_it_sorts_an_unsorted_array_of_four_7231\n  #   sorter = InsertionSort.new([7,2,3,1])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n  # def test_it_sorts_an_unsorted_array_of_four_3127\n  #   sorter = InsertionSort.new([3,1,2,7])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n  # def test_it_sorts_an_unsorted_array_of_four_3217\n  #\n  #   sorter = InsertionSort.new([3,2,1,7])\n  #   assert_equal [1,2,3,7], sorter.sort\n  # end\n\n  # FRING ISSUES #\n    def test_it_sorts_an_empty_array # REWRITE : if there's no argument passed at all\n      skip\n    end\n\n    def test_it_sorts_an_array_of_strings_and_integers # REWRITE : if there's no argument passed at all\n      skip\n    end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":52},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort_test.rb","digestWhenLastPersisted":"3ab206f939ec3fef3a61d0d1eef053edf75b54a6","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"gem 'minitest', '~> 5.2'\nrequire 'minitest/autorun'\nrequire 'minitest/pride'\nrequire_relative 'bubble_sort'\n\nclass BubbleSortTest < Minitest::Test\n  def test_it_sorts_an_array_with_one_element\n    bubblesort = BubbleSort.new([1])\n    assert_equal [1], bubblesort.sort\n  end\n\n  def test_it_sorts_a_different_array_with_one_number_element\n    bubblesort = BubbleSort.new([2])\n    assert_equal [2], bubblesort.sort\n  end\n\n  def test_it_sorts_an_empty_array\n    bubblesort = BubbleSort.new([])\n    assert_equal [], bubblesort.sort\n  end\n\n  def test_it_sorts_an_ordered_array_with_two_number_elements\n    bubblesort = BubbleSort.new([1,2])\n    assert_equal [1,2], bubblesort.sort\n  end\n\n  def test_it_sorts_an_unordered_array_with_two_number_elements\n    bubblesort = BubbleSort.new([2,1])\n    assert_equal [1,2], bubblesort.sort\n  end\n\n  def test_it_sorts_a_different_unordered_array_with_two_number_elements\n    bubblesort = BubbleSort.new([3,2])\n    assert_equal [2,3], bubblesort.sort\n  end\n\n  def test_it_sorts_an_unordered_array_with_two_letters_elements\n    bubblesort = BubbleSort.new([\"f\",\"c\"])\n    assert_equal [\"c\",\"f\"], bubblesort.sort\n  end\n\n  def test_it_sorts_an_unordered_array_with_two_letters_elements\n    bubblesort = BubbleSort.new([\"f\",\"c\"])\n    assert_equal [\"c\",\"f\"], bubblesort.sort\n  end\n\n  def test_it_sorts_an_ordered_array_with_three_elements\n    bubblesort = BubbleSort.new([4,5,6])\n    assert_equal [4,5,6], bubblesort.sort\n  end\n\n  def test_it_sorts_a_1_3_2_unordered_array_with_three_elements\n    bubblesort = BubbleSort.new([1,5,4])\n    assert_equal [1,4,5], bubblesort.sort\n  end\n\n  def test_it_sorts_a_2_1_3_unordered_array_with_three_elements\n    bubblesort = BubbleSort.new([4,1,5])\n    assert_equal [1,4,5], bubblesort.sort\n  end\n\n  def test_it_sorts_a_3_2_1_unordered_array_with_three_elements\n    bubblesort = BubbleSort.new([5,4,1])\n    assert_equal [1,4,5], bubblesort.sort\n  end\n\n  def test_it_sorts_a_1_2_4_3_unordered_array_with_four_elements\n    bubblesort = BubbleSort.new([5,7,10,8])\n    assert_equal [5,7,8,10], bubblesort.sort\n  end\n\n  def test_it_sorts_a_4_3_2_1_unordered_array_with_four_elements\n    bubblesort = BubbleSort.new([10,8,7,5])\n    assert_equal [5,7,8,10], bubblesort.sort\n  end\n\n  def test_it_sorts_our_test_array_with_four_elements\n    sorter = BubbleSort.new([\"d\",\"b\",\"a\",\"c\"])\n    assert_equal [\"a\", \"b\", \"c\", \"d\"], sorter.sort\n  end\n\n  def test_it_sorts_our_test_array_with_four_elements\n    sorter = BubbleSort.new([4,7,3,9,2,5,7,4,7,8,2,5])\n    assert_equal [2,2,3,4,4,5,5,7,7,7,8,9], sorter.sort\n  end\n\n  # def test_it_sorts_strings_and_integers\n  #   sorter = BubbleSort.new([4,\"Gus\",2,\"b\",5])\n  #   assert_equal [2,4,5,\"b\",\"Gus\"], sorter.sort\n  # end\nend\n\n# FRINGE ISSUES\n# Sorting a letter and number array\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":64},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort_test.rb","digestWhenLastPersisted":"680f97ede9deb290088ed084f78a68e688881367","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"class BubbleSort\n  attr_accessor :array, :length\n\n  def initialize(array)\n    @array = array\n    @length = array.length\n    @comparison_reps = length - 1\n  end\n\n  def id_and_switch(current,cnext)\n    if (array[current] <=> array[cnext]) == 1\n      array[current],array[cnext] = array[cnext],array[current]\n    end\n  end\n\n  def sort\n    @comparison_reps.times do\n      length.times do |i|\n        id_and_switch(i,i+1)\n      end\n    end\n    @array\n  end\nend\n\n# Note: to pass test_it_sorts_strings_and_integers, add something like this...\n#\n# array = [1, 'b', 'a', 'c', 'd', 2, 4, 3]\n# strings = []\n# numbers = []\n# array.each do |element|\n#   if element.is_a? String\n#     strings << element\n#   else\n#     numbers << element\n#   end\n# end\n# sorted_array = strings.sort + numbers.sort\n# sorted_array # ['a', 'b', 'c', 'd', 1, 2, 3, 4]\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":68},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort.rb","digestWhenLastPersisted":"263ea344047fd220df353a395fa77efdc0738837","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":48,"softTabs":true,"displayBuffer":{"id":49,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":52,"softTabs":true,"displayBuffer":{"id":53,"softWrapped":false,"scrollTop":1324,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort_test.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":64,"softTabs":true,"displayBuffer":{"id":65,"softWrapped":false,"scrollTop":1010,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort_test.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":68,"softTabs":true,"displayBuffer":{"id":69,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort.rb","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby-on-rails","language-ruby","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort.rb":1445269648692,"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/insertion_sort_test.rb":1445271296806,"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort_test.rb":1445271299529,"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort.rb":1445271358675},"keybinding-resolver":{},"metrics":{"sessionLength":14996047},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite":{"isExpanded":true,"entries":{".git":{"isExpanded":false,"entries":{}}}}},"selectedPath":"/Users/hectorhuertas/turing/1module/projects/beth-sorting-suite/bubble_sort.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}