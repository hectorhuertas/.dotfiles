{"mode":"editor","version":1,"windowDimensions":{"x":838,"y":23,"width":838,"height":1027,"maximized":false},"grammars":{"deserializer":"GrammarRegistry","grammarOverridesByPath":{}},"project":{"paths":["/Users/hectorhuertas/turing/1module/projects/sorting_suite"],"buffers":[{"text":"require_relative 'array_sorter'\n\nmodule SortingSuite\n  class SelectionSort\n    include ArraySorter\n\n    def initialize(array = [])\n      handle_array(array)\n    end\n\n    def swap(array, pos, min)\n      aux = min\n      array[array.index(min)] = array[pos]\n      array[pos] = min\n    end\n\n    def sort_logic(array)\n      (array.size - 1).times do |pos|\n        min = array[pos]\n        array.slice((pos + 1)..-1).each do |value|\n          min = value if value < min\n        end\n        swap(array, pos, min) if min < array[pos]\n      end\n\n      array\n    end\n  end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":226,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/selection_sort.rb","digestWhenLastPersisted":"b80951ea1936cb5273e0cadffb52014038141611","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"require_relative 'bubble_sort'\nrequire_relative 'insertion_sort'\nrequire_relative 'merge_sort'\nrequire_relative 'selection_sort'\n\nmodule SortingSuite\n  class Benchmark\n    attr_reader :array\n    def initialize(array = [])\n      handle_array(array)\n    end\n\n    def handle_array(array)\n      if array.nil?\n        @array ||= []\n      else\n        @array = array\n      end\n    end\n\n    def measure_time(sorter_class, array = nil)\n      handle_array(array)\n\n      sorter = sorter_class.new\n\n      starting_time = Time.now\n      sorter.sort(@array.dup)\n      duration = Time.now - starting_time\n\n      { sorter_class => duration }\n    end\n\n    def time(sorter_class, array = nil)\n      handle_array(array)\n\n      benchmark_result = measure_time(sorter_class)\n\n      sorter_name = benchmark_result.keys.first.name.split('::').last\n      sorter_time = benchmark_result.values.last\n      \"#{sorter_name} took #{'%f' % sorter_time} seconds\"\n    end\n\n    def sorters\n      module_members = SortingSuite.constants\n      module_members.delete_if { |member| member.to_s.slice(-4..-1) != 'Sort' }\n    end\n\n    def run_all(array = nil)\n      handle_array(array)\n\n      result = {}\n      sorters.each do |sorter|\n        sorter_class = Object.const_get('SortingSuite::' + sorter.to_s)\n        result[sorter] = measure_time(sorter_class).values.first\n      end\n\n      result\n    end\n\n    def pick_fastest(sorters_times)\n      sorters_times.key(sorters_times.values.min)\n    end\n\n    def pick_slowest(sorters_times)\n      sorters_times.key(sorters_times.values.max)\n    end\n\n    def fastest(array = nil)\n      handle_array(array)\n\n      fastest_sorter = pick_fastest(run_all)\n\n      \"#{fastest_sorter} is the fastest\"\n    end\n\n    def slowest(array = nil)\n      handle_array(array)\n\n      slowest_sorter = pick_slowest(run_all)\n\n      \"#{slowest_sorter} is the slowest\"\n    end\n  end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":244,"preserveFolds":true},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/benchmark.rb","digestWhenLastPersisted":"f0bdc85b4324caf8af7030216260a711411cab03","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"require_relative 'lib/sorting_suite/benchmark'                    # => true\nputs 'Hello, Sorting Suite! -> Observe with seeing-is-believing'  # => nil\n\nsorter=SortingSuite::BubbleSort.new(%w(d k e i a x b))  # => #<SortingSuite::BubbleSort:0x007fee13892200 @array=[\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]>\nsorter.array                                            # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort                                             # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                            # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort!                                            # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                            # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\n\nsorter = SortingSuite::InsertionSort.new([5, 2, 6, 1])  # => #<SortingSuite::InsertionSort:0x007fee138914b8 @array=[5, 2, 6, 1]>\nsorter.array                                            # => [5, 2, 6, 1]\nsorter.sort                                             # => [1, 2, 5, 6]\nsorter.array                                            # => [5, 2, 6, 1]\nsorter.sort!                                            # => [1, 2, 5, 6]\nsorter.array                                            # => [1, 2, 5, 6]\narray = [5, 2, 6, 1]                                    # => [5, 2, 6, 1]\nsorter.array                                            # => [1, 2, 5, 6]\nsorter.inplace_sort([5, 2, 6, 1])                       # => [1, 2, 5, 6]\n\nSortingSuite::InsertionSort.new(array).inplace_sort.object_id == array.object_id  # => true\n\n\nsorter=SortingSuite::MergeSort.new(%w(d k e i a x b))  # => #<SortingSuite::MergeSort:0x007fee138901a8 @array=[\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]>\nsorter.array                                           # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort                                            # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                           # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort!                                           # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                           # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\n\nsorter=SortingSuite::SelectionSort.new(%w(d k e i a x b))  # => #<SortingSuite::SelectionSort:0x007fee1388a370 @array=[\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]>\nsorter.array                                               # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort                                                # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                               # => [\"d\", \"k\", \"e\", \"i\", \"a\", \"x\", \"b\"]\nsorter.sort!                                               # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\nsorter.array                                               # => [\"a\", \"b\", \"d\", \"e\", \"i\", \"k\", \"x\"]\n\n# >> Hello, Sorting Suite! -> Observe with seeing-is-believing\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":256},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/sorting_suite.rb","digestWhenLastPersisted":"02372e9e837339d7f11aaa54c7eb95be95f9bbd2","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"require_relative 'array_sorter'\n\nmodule SortingSuite\n  class MergeSort\n    include ArraySorter\n\n    def initialize(array = [])\n      handle_array(array)\n    end\n\n    def sort_logic(array)\n      if array.size == 1 || array.empty?\n        return array\n      else\n        first_half = sort_logic(array.take(array.size / 2))\n        second_half = sort_logic(array.slice((array.size / 2)..-1))\n        ordered_array = []\n\n        while first_half.any? && second_half.any?\n          if first_half.first < second_half.first\n            ordered_array << first_half.shift\n          else\n            ordered_array << second_half.shift\n          end\n        end\n\n        if first_half.empty?\n          ordered_array += second_half\n        else\n          ordered_array += first_half\n        end\n\n        array.replace(ordered_array)\n      end\n    end\n  end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":260},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/merge_sort.rb","digestWhenLastPersisted":"f7cbcc403202aafbaa20babd431616b46ee7d69c","preferredLineEnding":null,"deserializer":"TextBuffer","version":2},{"text":"require_relative 'array_sorter'\n\nmodule SortingSuite\n  class InsertionSort\n    include ArraySorter\n\n    def initialize(array = [])\n      handle_array(array)\n    end\n\n    def sort_logic(array)\n      ordered_array = []\n      @array.each do |number|\n        place = nil\n        ordered_array.each do |ordered_number|\n          if number < ordered_number\n            place = ordered_array.index(ordered_number)\n            break\n          end\n        end\n        ordered_array.insert(place, number) if place\n\n        ordered_array << number unless place\n      end\n      ordered_array\n    end\n\n    def sort!(array = [])\n      inplace_sort(array)\n    end\n\n    def inplace_sort(array = [])\n      handle_array(array)\n\n      1.upto(@array.size - 1) do |count|\n        count.times do |pos|\n          if @array[count] < @array[pos]\n            @array.insert(pos, @array.delete_at(count))\n          end\n        end\n      end\n\n      @array\n    end\n  end\nend\n","markerStore":{"nextMarkerId":1,"markersById":{"0":{"range":{"start":{"row":0,"column":0},"end":{"row":0,"column":0}},"properties":{"type":"selection","editorId":264},"reversed":false,"tailed":false,"valid":true,"invalidate":"never","maintainHistory":true}},"version":2},"history":{"version":3,"nextCheckpointId":1,"undoStack":[],"redoStack":[]},"encoding":"utf8","filePath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/insertion_sort.rb","digestWhenLastPersisted":"dcfaef1501023c4dcaae101401280787cbcc818a","preferredLineEnding":null,"deserializer":"TextBuffer","version":2}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"id":3,"items":[{"id":244,"softTabs":true,"displayBuffer":{"id":245,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/benchmark.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":256,"softTabs":true,"displayBuffer":{"id":257,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/sorting_suite.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":260,"softTabs":true,"displayBuffer":{"id":261,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/merge_sort.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":264,"softTabs":true,"displayBuffer":{"id":265,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/insertion_sort.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"},{"id":226,"softTabs":true,"displayBuffer":{"id":227,"softWrapped":false,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/selection_sort.rb","largeFileMode":false,"deserializer":"TokenizedBuffer"},"largeFileMode":false,"deserializer":"DisplayBuffer"},"deserializer":"TextEditor"}],"activeItemURI":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/insertion_sort.rb","focused":false,"flexScale":1,"deserializer":"Pane"},"activePaneId":3,"deserializer":"PaneContainer","version":1},"fullScreen":false,"packagesWithActiveGrammars":["language-ruby","language-hyperlink","language-todo"],"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"findOptions":{"findPattern":"SelectionSort","replacePattern":"","pathsPattern":"","useRegex":false,"wholeWord":false,"caseSensitive":false,"inCurrentSelection":false},"findHistory":["sorter_class"],"replaceHistory":[],"pathsHistory":[]},"fuzzy-finder":{"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/benchmark.rb":1445840212961,"/Users/hectorhuertas/turing/1module/projects/sorting_suite/sorting_suite.rb":1445840233914,"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/merge_sort.rb":1445840249262,"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/insertion_sort.rb":1445840277868,"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/selection_sort.rb":1445730867688},"keybinding-resolver":{},"metrics":{"sessionLength":96918},"tabs":[{}],"tree-view":{"directoryExpansionStates":{"/Users/hectorhuertas/turing/1module/projects/sorting_suite":{"isExpanded":true,"entries":{"lib":{"isExpanded":true,"entries":{"sorting_suite":{"isExpanded":true,"entries":{}}}},"test":{"isExpanded":true,"entries":{"sorting_suite":{"isExpanded":true,"entries":{}}}}}}},"selectedPath":"/Users/hectorhuertas/turing/1module/projects/sorting_suite/lib/sorting_suite/insertion_sort.rb","hasFocus":true,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}